!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteClick=r,this._handleLikeButton=i}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeButton(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this._link,this._name)}))}updateLikes(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button-active")}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleDeleteButton(){this._cardElement.remove()}getView(){this._cardElement=this._getTemplate(),this._cardElement.querySelector(".card__title").textContent=this._name;const e=this._cardElement.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._isLiked&&this._cardElement.querySelector(".card__like-button").classList.add("card__like-button-active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList=[...this._form.querySelectorAll(this._inputSelector)],this._normalSubmitTextContent=this._submitButton.textContent}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t?(e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)):console.error(`Error message element not found for input: ${e.id}`)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t?(e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)):console.error(`Error message element not found for input: ${e.id}`)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid||""===e.value.trim()))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._normalSubmitTextContent}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._closeModalOnClick=this._closeModalOnClick.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_closeModalOnClick(e){(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close-button"))&&this.close()}setEventListeners(){this._modalElement&&this._modalElement.addEventListener("mousedown",this._closeModalOnClick)}}var r=class extends s{constructor(e){let{modalSelector:t,handleFormSubmit:s}=e;super({modalSelector:t}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=s}_getInputValues(){return this._inputList=this._modalForm.querySelectorAll(".modal__form-input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}close(){this._modalForm.reset(),super.close()}};const i={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};var o=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s,this._checkResponse=this._checkResponse.bind(this),this._catchError=this._catchError.bind(this),this.getInitialCards=this.getInitialCards.bind(this),this.getUserInfo=this.getUserInfo.bind(this),this.updateUserInfo=this.updateUserInfo.bind(this),this.updateProfileImage=this.updateProfileImage.bind(this),this.addCard=this.addCard.bind(this),this.deleteCard=this.deleteCard.bind(this),this.likeCard=this.likeCard.bind(this)}_checkResponse(e){return e.ok?e.json():(console.log(e),Promise.reject(`Error: ${e.status}`))}_catchError(e){console.error(e)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse).catch(this._catchError)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse).then((e=>(console.log("Fetched User Info:",e),e))).catch(this._catchError)}updateUserInfo(e){return console.log("Updated user info:",e),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse).catch(this._catchError)}updateProfileImage(e){return console.log("Updated profile image: ",e),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.profileImage})}).then(this._checkResponse).catch(this._catchError)}addCard(e){return console.log("Added card: ",e),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse).catch(this._catchError)}deleteCard(e){return console.log("Deleted card: ",e),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._catchError)}likeCard(e){return console.log("Liked card: ",e),fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse).catch(this._catchError)}unlikeCard(e){return console.log("Unliked card: ",e),fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).catch(this._catchError)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9a90ec5a-14f2-498a-9ea3-2f40d91524b3","Content-Type":"application/json"}});const n=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-add-button"),l=document.querySelector("#profile-image-button"),d=document.querySelector("#modal-input-title"),c=document.querySelector("#modal-input-description"),h=document.forms["modal-image-form"],m=document.forms["modal-profile-form"],_=document.forms["profile-image-modal-form"],u=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:s,avatar:r}=e;t&&(this._nameElement.textContent=t),s&&(this._descriptionElement.textContent=s),r&&(this._avatarElement.src=r)}}({nameSelector:"#profile-title",descriptionSelector:"#profile-description",avatarSelector:".profile__image"}),p=new class extends s{constructor(e){let{modalSelector:t,handleFormSubmit:s}=e;super({modalSelector:t}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=s}setEventListeners(){this._modalForm&&this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}setSubmitHandler(e){this._handleFormSubmit=e}}({modalSelector:"#delete-confirmation-modal",handleFormSubmit:()=>{}});p.setEventListeners();const E=new r({modalSelector:"#profile-edit-modal",handleFormSubmit:e=>{y.renderLoading(!0),o.updateUserInfo({name:e.title,about:e.description}).then((e=>{u.setUserInfo({name:e.name,description:e.about,avatar:e.avatar}),E.close()})).catch((e=>console.error(e))).finally((()=>{y.renderLoading(!1)}))}}),f=new r({modalSelector:"#add-image-modal",handleFormSubmit:e=>{C.renderLoading(!0),o.addCard({name:e.title,link:e.link}).then((e=>{k.addItem(g(e)),f.close()})).catch((e=>console.error(e))).finally((()=>{C.renderLoading(!1)}))}}),b=new r({modalSelector:"#profile-image-modal",handleFormSubmit:e=>{C.renderLoading(!0),o.updateProfileImage({profileImage:e.link}).then((e=>{u.setUserInfo({avatar:e.avatar}),b.close()})).catch((e=>console.error(e))).finally((()=>{I.renderLoading(!1)}))}}),S=new class extends s{constructor(e){super({modalSelector:e}),this._modalImage=this._modalElement.querySelector(".modal__preview")}open(e){let{name:t,link:s}=e;const r=this._modalImage.querySelector(".modal__preview-image"),i=this._modalImage.querySelector(".modal__preview-description");r.src=s,r.alt=t,i.textContent=t,super.open()}}("#image-preview-modal");function v(e,t){S.open({name:t,link:e})}function g(t){return new e(t,"#card-template",v,U,q).getView()}document.querySelectorAll(".modal").forEach((e=>{new s({modalSelector:`#${e.id}`}).setEventListeners()}));const k=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{console.log("Rendering Item:",e),this._renderer(e)}))}addItem(e){this._container.append(e)}}({items:o.getInitialCards,renderer:e=>{const t=g(e);k.addItem(t)}},".cards__list"),L=new t(i,m),C=new t(i,h),I=new t(i,_),y=new t(i,m);function U(e){p.open(),p.setSubmitHandler((()=>{e&&o.deleteCard(e.id).then((()=>{e.handleDeleteButton(),e=null,p.close()})).catch((e=>console.error(e)))}))}function q(e){e._isLiked?o.unlikeCard(e.id).then((t=>{e._isLiked=!1,e.updateLikes()})).catch((e=>console.error(e))):o.likeCard(e.id).then((()=>{e._isLiked=!0,e.updateLikes()})).catch((e=>console.error(e)))}I.enableValidation(),L.enableValidation(),C.enableValidation(),I.enableValidation(),n.addEventListener("click",(()=>{const e=u.getUserInfo();d.value=e.name,c.value=e.description,E.open(),L.resetValidation()})),a.addEventListener("click",(()=>{f.open(),C.resetValidation()})),l.addEventListener("click",(()=>{b.open(),I.resetValidation()})),E.setEventListeners(),f.setEventListeners(),b.setEventListeners(),S.setEventListeners(),Promise.all([o.getUserInfo(),o.getInitialCards()]).then((e=>{let[t,s]=e;console.log("User Data:",t),console.log("Initial Cards:",s),u.setUserInfo({name:t.name,description:t.about,avatar:t.avatar}),k.renderItems(s)})).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,